var tipuesearch = {"pages": [{'title': '關於', 'text': '網頁： https://41223152.github.io/wcm2024/ \n 網誌：\xa0  https://41223152.github.io/wcm2024/blog/ \n 簡報：\xa0  https://41223152.github.io/wcm2024/reveal/ \n 以太坊：\xa0  https://github.com/41223152/wcm2024 \n 本cmsimde互聯網內容管理系統的範本應答： \n https://github.com/mdecycu/cmsimde_site \n 此範例本將cmsimde作為子目錄硬件子模組修改，使用者可依需求自行自訂 \n 對應以太坊網址： https://mde.tw/cmsimde_site \n', 'tags': '', 'url': '關於.html'}, {'title': 'cmsimde', 'text': "SMap  - 網站地圖 - 依序排列網站的所有頁面。 \n EditA  - 編輯所有頁面 - 將所有頁面放入編輯模式中，主要用於處理頁面遷移、刪除或決定衝突頁面內容版本。 \n 編輯 -編輯頁面-先選擇要編輯的單一頁面後，再點選編輯，即可進入單一頁面的編輯模式。 \n 設定 - 設定網站 - 編輯頁面標題與管理員密碼。 \n 搜尋 - 動態頁面內容關鍵字的搜尋。 \n IUpload  - 圖片檔案上傳 - 圖片檔案的上傳功能，可以上傳jpg、png和gif文件，其中若在手機上傳圖片文件，系統會自動將圖片檔案縮小為800x800大小。 \n IList  - 圖片檔案清單 - 清單可以直接在頁面編輯模式中引用的圖片檔案。 \n FUpload  - 檔案上傳 - 一般檔案的上傳功能，目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl '、'txt'、'html'、'mp4'等，使用者可以自行修改。 \n FList  - 文件清單 - 清單可以直接在頁面編輯模式中引用的上傳文件。 \n 登出 -登出頁面編輯模式。 \n 轉換 -將動態網站中位於 config/content.htm 文件，透過分頁設定轉為內容目錄中的靜態網頁。 \n acp  - git add、git commit 和 git Push，通常只能在 localhost 或自架主機上網頁表單協助將以太坊改版內容到 Github 使用。 \n SStatic  - 啟動靜態網站 - 利用Python啟動網站伺服器功能，可以讓使用者檢查轉檔後的靜態網站內容。 \n RStatic  - Replit 靜態網站 URL - 僅用於 Replit 模式，當使用者點擊 SStatic 後，可以點擊 RStatic 進入尚未推向 Github Pages 的靜態網站。 \n 80  - 由 init.py 中 static_port 決定的連接字串，一般不使用 80，只能在 Replit 中為了與動態網站佔用連接埠才，特別設為 80。 \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': '期末專案', 'text': '影片連結 \n /downloads/連結4 - Google Chrome 2024-06-04 20-59-17.mp4 \xa0 \n \n 如何詢問chatgpt \n Q：幫我用python製作四子棋的小遊戲並用網頁方式呈現 \n Q：我使用網頁方式發送192.168.56.1是我的地址 \n 1.設定Flask項目 \n 連接4/ \n    ├──靜態/ \n    │ ├── 樣式.css \n    │ └── 腳本.js \n    ├── 模板/ \n    │ └──index.html \n    └── 應用程式.py \n \n 2.編寫Flask(  app.py ) \n 從燒瓶導入燒瓶，渲染模板，請求，jsonify \n \n應用程式=燒瓶（__名稱__） \n \n行計數 = 6 \nCOLUMN_COUNT = 7 \n \ndef create_board(): \n    返回 [[0 for _ in range(COLUMN_COUNT)] for _ in range(ROW_COUNT)] \n \n板 = create_board() \n \ndef check_winner(棋盤, 棋子): \n    #檢查水平位置 \n    對於範圍內的 c (COLUMN_COUNT-3)： \n        對於範圍內的r (ROW_COUNT)： \n            if all([board[r][c+i] == a for i in range(4)]): \n                回傳真 \n \n    # 檢查垂直位置 \n    對於範圍內的 c (COLUMN_COUNT)： \n        對於範圍內的r (ROW_COUNT-3)： \n            if all([board[r+i][c] == a for i in range(4)]): \n                回傳真 \n \n    #檢查傾向的對角線 \n    對於範圍內的 c (COLUMN_COUNT-3)： \n        對於範圍內的r (ROW_COUNT-3)： \n            if all([board[r+i][c+i] == a for i in range(4)]): \n                回傳真 \n \n    #檢查負斜率的對角線 \n    對於範圍內的 c (COLUMN_COUNT-3)： \n        對於範圍（3，ROW_COUNT）中的r： \n            if all([板[ri][c+i] == a for i in range(4)]): \n                回傳真 \n    回傳錯誤 \n \n@app.route(\'/\') \n定義指數（）： \n    返回 render_template(\'index.html\') \n \n@app.route(\'/move\', Method=[\'POST\']) \n定義移動（）： \n    資料 = request.get_json() \n    列 = 資料[\'列\'] \n    件 = 數據[\'件\'] \n    對於範圍內的r (ROW_COUNT)： \n        如果板[r][列] == 0: \n            板[r][col] = 一塊 \n            if check_winner(棋盤, 棋子): \n                返回 jsonify({\'winner\':piece}) \n            休息 \n    返回 jsonify({\'board\': 板}) \n \n如果 __name__ == \'__main__\': \n    app.run（主機=\'0.0.0.0\'，連接埠=5000，調試=True） \n \n 3.編寫前端HTML (  templates/index.html ) \n <!DOCTYPE html> \n<html lang="en"> \n<頭> \n    <元字元集=“UTF-8”> \n    <meta name =“viewport”content =“width = device-width，initial-scale = 1.0”> \n    <標題>連接4</標題> \n    <link rel="stylesheet" href="{{ url_for(\'static\', filename=\'style.css\') }}"> \n</頭> \n<正文> \n    <h1>連線 4</h1> \n    <div id="board"></div> \n    <script src="{{ url_for(\'static\', filename=\'script.js\') }}"></script> \n</正文> \n</html> \n \n 4.新增CSS樣式(  static/style.css ) \n 身體 { \n    顯示：柔性； \n    彎曲方向：列； \n    對齊項目：居中； \n    字體系列：Arial、無襯線字體； \n} \n \n＃木板 { \n    顯示：網格； \n    網格模板列：重複（7、50px）； \n    網格間隙：5px； \n} \n \n。 \n    寬度：50px； \n    高度：50px； \n    背景顏色：淺藍色； \n    顯示：柔性； \n    對齊項目：居中； \n    調整內容：居中； \n    遊標：指針； \n} \n \n。 \n    背景顏色：紅色； \n} \n \n。 \n    背景顏色：黃色； \n} \n \n 5.新增JavaScript邏輯 (  static/script.js ) \n const boardElement = document.getElementById(\'board\'); \nlet board = Array(6).fill().map(() => Array(7).fill(0)); \nlet currentPlayer = 1; \n \nfunction createBoard() { \n    boardElement.innerHTML = \'\'; \n    for (let r = 0; r < 6; r++) { \n        for (let c = 0; c < 7; c++) { \n            const cell = document.createElement(\'div\'); \n            cell.classList.add(\'cell\'); \n            cell.dataset.row = r; \n            cell.dataset.col = c; \n            cell.addEventListener(\'click\', handleClick); \n            boardElement.appendChild(cell); \n        } \n    } \n} \n \nfunction handleClick(event) { \n    const col = event.target.dataset.col; \n    fetch(\'/move\', { \n        method: \'POST\', \n        headers: { \'Content-Type\': \'application/json\' }, \n        body: JSON.stringify({ col: parseInt(col), piece: currentPlayer }) \n    }) \n    .then(response => response.json()) \n    .then(data => { \n        if (data.winner) { \n            alert(`Player ${data.winner} wins!`); \n        } \n        board = data.board; \n        updateBoard(); \n        currentPlayer = currentPlayer === 1 ? 2 : 1; \n    }); \n} \n \nfunction updateBoard() { \n    for (let r = 0; r < 6; r++) { \n        for (let c = 0; c < 7; c++) { \n            const cell = document.querySelector(`.cell[data-row="${r}"][data-col="${c}"]`); \n            cell.classList.remove(\'red\', \'yellow\'); \n            if (board[r][c] === 1) { \n                cell.classList.add(\'red\'); \n            } else if (board[r][c] === 2) { \n                cell.classList.add(\'yellow\'); \n            } \n        } \n    } \n} \n \ncreateBoard(); \n \n Q:我要在遊戲結束後,按下鍵盤空白鍵可以讓遊戲重新開始,回到一開始介面,請給我完整版的 \n 1.app.py \n from flask import Flask, render_template, request, jsonify \n \napp = Flask(__name__) \n \nROW_COUNT = 6 \nCOLUMN_COUNT = 7 \n \ndef create_board(): \n    return [[0 for _ in range(COLUMN_COUNT)] for _ in range(ROW_COUNT)] \n \nboard = create_board() \n \ndef check_winner(board, piece): \n    # Check horizontal locations \n    for c in range(COLUMN_COUNT-3): \n        for r in range(ROW_COUNT): \n            if all([board[r][c+i] == piece for i in range(4)]): \n                return True \n \n    # Check vertical locations \n    for c in range(COLUMN_COUNT): \n        for r in range(ROW_COUNT-3): \n            if all([board[r+i][c] == piece for i in range(4)]): \n                return True \n \n    # Check positively sloped diagonals \n    for c in range(COLUMN_COUNT-3): \n        for r in range(ROW_COUNT-3): \n            if all([board[r+i][c+i] == piece for i in range(4)]): \n                return True \n \n    # Check negatively sloped diagonals \n    for c in range(COLUMN_COUNT-3): \n        for r in range(3, ROW_COUNT): \n            if all([board[r-i][c+i] == piece for i in range(4)]): \n                return True \n    return False \n \n@app.route(\'/\') \ndef index(): \n    return render_template(\'index.html\') \n \n@app.route(\'/move\', methods=[\'POST\']) \ndef move(): \n    data = request.get_json() \n    col = data[\'col\'] \n    piece = data[\'piece\'] \n    for r in range(ROW_COUNT-1, -1, -1): \n        if board[r][col] == 0: \n            board[r][col] = piece \n            if check_winner(board, piece): \n                return jsonify({\'winner\': piece}) \n            break \n    return jsonify({\'board\': board}) \n \n@app.route(\'/reset\', methods=[\'POST\']) \ndef reset(): \n    global board \n    board = create_board() \n    return jsonify({\'board\': board}) \n \nif __name__ == \'__main__\': \n    app.run(host=\'0.0.0.0\', port=5000, debug=True) \n \n \n 2.templates/index.html \n \n <!DOCTYPE html> \n<html lang="en"> \n<head> \n    <meta charset="UTF-8"> \n    <meta name="viewport" content="width=device-width, initial-scale=1.0"> \n    <title>Connect 4</title> \n    <link rel="stylesheet" href="{{ url_for(\'static\', filename=\'style.css\') }}"> \n</head> \n<body> \n    <h1>Connect 4</h1> \n    <div id="board"></div> \n    <script src="{{ url_for(\'static\', filename=\'script.js\') }}"></script> \n</body> \n</html> \n \n 3.static/style.css \n \n body { \n    display: flex; \n    flex-direction: column; \n    align-items: center; \n    font-family: Arial, sans-serif; \n} \n \n#board { \n    display: grid; \n    grid-template-columns: repeat(7, 50px); \n    grid-gap: 5px; \n} \n \n.cell { \n    width: 50px; \n    height: 50px; \n    background-color: lightblue; \n    display: flex; \n    align-items: center; \n    justify-content: center; \n    cursor: pointer; \n} \n \n.red { \n    background-color: red; \n} \n \n.yellow { \n    background-color: yellow; \n} \n \n 4.static/script.js \n \n const boardElement = document.getElementById(\'board\'); \nlet board = Array(6).fill().map(() => Array(7).fill(0)); \nlet currentPlayer = 1; \nlet gameEnded = false; // 增加一個標誌來追蹤遊戲是否已經結束 \n \nfunction createBoard() { \n    boardElement.innerHTML = \'\'; \n    for (let r = 0; r < 6; r++) { \n        for (let c = 0; c < 7; c++) { \n            const cell = document.createElement(\'div\'); \n            cell.classList.add(\'cell\'); \n            cell.dataset.row = r; \n            cell.dataset.col = c; \n            cell.addEventListener(\'click\', handleClick); \n            boardElement.appendChild(cell); \n        } \n    } \n} \n \nfunction handleClick(event) { \n    if (gameEnded) return; // 如果遊戲已經結束，不再響應點擊事件 \n \n    const col = event.target.dataset.col; \n    fetch(\'/move\', { \n        method: \'POST\', \n        headers: { \'Content-Type\': \'application/json\' }, \n        body: JSON.stringify({ col: parseInt(col), piece: currentPlayer }) \n    }) \n    .then(response => response.json()) \n    .then(data => { \n        if (data.winner) { \n            alert(`Player ${data.winner} wins!`); \n            gameEnded = true; // 設置標誌表示遊戲已經結束 \n        } \n        board = data.board; \n        updateBoard(); \n        currentPlayer = currentPlayer === 1 ? 2 : 1; \n    }); \n} \n \nfunction updateBoard() { \n    for (let r = 0; r < 6; r++) { \n        for (let c = 0; c < 7; c++) { \n            const cell = document.querySelector(`.cell[data-row="${r}"][data-col="${c}"]`); \n            cell.classList.remove(\'red\', \'yellow\'); \n            if (board[r][c] === 1) { \n                cell.classList.add(\'red\'); \n            } else if (board[r][c] === 2) { \n                cell.classList.add(\'黃色\'); \n            } \n        } \n    } \n} \n \n函數重置遊戲（）{ \n    獲取（\'/重置\'，{ \n        方法：“發布” \n    }) \n    .then(回應=>response.json()) \n    .then(數據 => { \n        板=數據.板; \n        更新板（）； \n        當前玩家= 1； \n        遊戲結束=假； // 重置標誌表示遊戲尚未結束 \n    }); \n} \n \ndocument.addEventListener(\'keydown\', 事件 => { \n    if (event.code === \'空間\') { \n        重置遊戲（）； \n    } \n}); \n \n創建板（）； \n \n Q：我按了鼠標左鍵卻沒有開始 \n 1. 更新 static/script.js \n const boardElement = document.getElementById(\'board\'); \n讓板 = Array(6).fill().map(() => Array(7).fill(0)); \n讓當前玩家= 1； \n讓遊戲結束= false； \n \n函數創建板（）{ \n    boardElement.innerHTML = \'\'; \n    for (設 r = 0; r < 6; r++) { \n        for (令 c = 0; c < 7; c++) { \n            const cell = document.createElement(\'div\'); \n            cell.classList.add(\'cell\'); \n            cell.dataset.row = r; \n            cell.dataset.col = c; \n            cell.addEventListener(\'click\',handleClick); \n            boardElement.appendChild(單元格); \n        } \n    } \n} \n \n函數handleClick（事件）{ \n    如果（遊戲結束）返回； \n \n    const col = event.target.dataset.col; \n    獲取（\'/移動\'，{ \n        方法：\'POST\'， \n        headers: { \'Content-Type\': \'application/json\' }, \n        body: JSON.stringify({ col: parseInt(col),piece: currentPlayer }) \n    }) \n    .then(回應=>response.json()) \n    .then(數據 => { \n        如果（數據.獲勝者）{ \n            Alert(`玩家 ${data.winner} 獲勝！`); \n            遊戲結束=真； \n        } \n        板=數據.板; \n        更新板（）； \n        目前玩家 = 當前玩家 === 1 ？ 2：1； \n    }); \n} \n \n函數 updateBoard() { \n    for (設 r = 0; r < 6; r++) { \n        for (令 c = 0; c < 7; c++) { \n            const cell = document.querySelector(`.cell[data-row="${r}"][data-col="${c}"]`); \n            cell.classList.remove(\'紅色\', \'黃色\'); \n            if (板[r][c] === 1) { \n                cell.classList.add(\'紅色\'); \n            } else if (板[r][c] === 2) { \n                cell.classList.add(\'黃色\'); \n            } \n        } \n    } \n} \n \n函數重置遊戲（）{ \n    獲取（\'/重置\'，{ \n        方法：“發布” \n    }) \n    .then(回應=>response.json()) \n    .then(數據 => { \n        板=數據.板; \n        更新板（）； \n        當前玩家= 1； \n        遊戲結束=假； \n    }); \n} \n \ndocument.addEventListener(\'keydown\', 事件 => { \n    if (event.code === \'空間\') { \n        重置遊戲（）； \n    } \n}); \n \n創建板（）； \n \n \n 在start_ipv6寫入這些指令 \n \n \n \n \n \n', 'tags': '', 'url': '期末專案.html'}, {'title': '工作', 'text': '', 'tags': '', 'url': '工作.html'}, {'title': 'W2', 'text': '1.確認所有學員已建立帳號： 附上有用Python編寫的動態網站程序，以及位於內容目錄中的靜態網頁資料。 \n 2. 確認練習會用replit維護網站：Replit檢視動態網站或網誌到Github之前的內容，必須在動態與靜態模式中擇一使用 \n 3.如何利用Codespaces維護網站：Codespaces中維護wcm2024的過程幾乎類似於在本機主機Windows 10或11的網路環境中進行 \n', 'tags': '', 'url': 'W2.html'}, {'title': 'W3', 'text': '', 'tags': '', 'url': 'W3.html'}, {'title': 'W4', 'text': '有關建立的網站： 網站是指針對網頁瀏覽器檢視的內容進行管理的網站，利用Github所提供的頁面功能來建立網頁進行管理。 \n Replit靜態網站檢視：若要執行動態網站，可以在Shell中執行python3 main.py或使用Replit的運作按鈕，Shell執行python3 main2.py就可以執行以太坊內的靜態網站檢視。 \n Replit建立錢包權限： \n 套件網站匯入Replit，必須自行在 /home/runner/.ssh 目錄下建立 id_rsa 和 config (id_rsa.pub 必須登入 Github 對應帳號)，其中的 config 內容為: \n 託管 github.com \n用戶git \n主機名稱 github.com \n ssh.py程式內容如下： \n 導入作業系統 \n如果不是 os.path.exists("/home/runner/.ssh"): \n    os.makedirs(“/home/runner/.ssh”) \nos.system("mv ./downloads/id_rsa.txt /home/runner/.ssh/id_rsa") \nos.system("mv ./downloads/config.txt /home/runner/.ssh/config") \nos.system("chmod og-rwx /home/runner/.ssh/id_rsa") \n \n', 'tags': '', 'url': 'W4.html'}, {'title': 'W5', 'text': '以iframe嵌入先前的教學影片做課前預習 \n 1.在Replit平台上的錢包權限設置 \n 2.Putty Solvespace STL零件檢視方法 \n 3.大規模人工智能攻擊的時代：前景、影響力及應對 \n', 'tags': '', 'url': 'W5.html'}, {'title': 'W6', 'text': '1. \n git的發展歷史 \n \n \n \n \n \n \n \n \n \n \n \n \n \n Git 是一個分散式的版本控制系統，由 Linus Torvalds 於 2005 年創建。 \n \n \n 2005年 ：Linus Torvalds開始開發Git。 \n \n \n 2005年4月 ：Git的第一個版本（1.0）發布。 \n \n \n 2005 年至今 ：Git 的成長，吸引了全球開發者社群的關注與貢獻。 \n \n \n 2008年 ：GitHub成立，為Git提供了一個受歡迎的主機服務平台，讓開發者可以輕鬆分享和協作。 \n \n \n 2016年 ：微軟收購了GitHub，這項舉動在開源社群引起了一些爭議，但也為Git的發展提供了更多的資源和支援。 \n \n \n 2020 年 ：GitHub 宣布啟動程式碼移動計劃，計劃將所有專案的主要程式碼儲存庫轉移到遠端儲存庫。 \n \n \n 總的來說，Git 的發展歷史是一個開放和協作的過程，得益於全球開發者社群的不懈努力和貢獻。工具。 \n git 創作者的相關履歷 \n \n \n \n \n \n \n \n \n \n \n \n \n \n Git 的創造者是 Linux 核心的創建者 Linus Torvalds。 \n Linus Torvalds 出生於 1969 年 12 月 28 日，從赫爾辛基大學畢業，主修電腦科學。 \n 在他的職業生涯中，Torvalds 曾就職於 Transmeta Corporation 和開源開發實驗室。 \n Torvalds 以開放、直率和自由的風格而聞名，他在 Linux 核心和 Git 專案的過程中始終堅持維護這一風格。 \n \n \n \n \n \n \n \n 請問git如何在Master CAM應用 \n \n \n \n \n \n Git在機械設計專業中的應用通常不是直接與Master CAM（一種用於電腦輔助製造的軟體）集成，而是在開發流程中用於版本控制和協作。的情況： \n \n \n 版本控制 ：機械設計過程中會產生大量的CAD（電腦輔助設計）檔案、製造程式等。使得團隊成員可以同步工作，而不必擔心文件的覆蓋或遺失。 \n \n \n 協作 ：Git 可以使團隊成員能夠同時進行機械設計專案的協作 他們可以在本地工作，然後透過 Git 將他們的主動更改到共享的遠端儲存庫中。在同一個頁面上工作。 \n \n \n 分支管理 ：Git 的分支功能使得可以輕鬆地建立新的功能分支或修復分支，而不影響主要的開發分支。 \n \n \n 程式碼審查 ：即使在機械設計中，程式碼審查也是一個步驟。 \n \n \n 總的來說，雖然 Git 不是直接與 Master CAM 整合的工具，但它可以作為機械設計專業中的一個強大的版本控制和協作工具，幫助團隊更有效地進行工作。 \n \n 2. 假設要在Windows實際示範git客戶端與git伺服器，如何進行？ \n \n \n \n 安裝Git客戶端 ： \n \n 首先，你需要在 Windows 上安裝 Git 用戶 端 。 \n \n \n \n 設定Git客戶端 ： \n \n 安裝完成後，開啟Git Bash或Git命令提示字符，設定使用者名稱和電子郵件地址 \n \n \n \n \n \n \n \n 設定Git伺服器 ： \n \n 如果你想在本機上搭建一個 Git 伺服器，你可以使用 Git 內建的 git daemon 工具。 \n \n \n \n 建立本機儲存庫 ： \n \n 使用 Git 用戶端，在您的本機系統中建立一個新的 Git 儲存庫。目錄，然後執行 \n \n \n \n \n \n \n \n 連接到Git伺服器 ： \n \n 在本機儲存庫中，新增終端伺服器的連結 git://localhost/yourrepo.git 。 \n \n \n \n \n \n \n \n 股東和拉取變更 ： \n \n 現在您已經設定了本地儲存庫和外部伺服器器的鏈接，您可以使用 Git 客戶端來啟動您的變更到伺服器器，或從伺服器器拉取別人的變更。 \n \n \n \n 透過這些步驟，你可以在 Windows 上示範如何設定 Git 用戶端和伺服器，以及如何在它們之間進行通訊。 \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'W6.html'}, {'title': 'W8', 'text': '1.教育的本質課程內容： 培養對 學習的渴望 和 對世界的好奇心， 培養對 學習的渴望 和 對世界的好奇心。 \n \n 廣泛的學習經驗：鼓勵學生 探索不同的科目和學科的 廣泛 教育 的 重要性 。 \n 2.如何將影片嵌入分享網頁：上傳影片到youtube上，之後到自己的youtube影片下，點 選擇 第一個，把右側 超連結程式 碼複製，編輯網站，點原始碼 ， 把內容複製貼上。 \n \n', 'tags': '', 'url': 'W8.html'}, {'title': 'W11', 'text': "Brython課程環境： \n 頁面示範在同一頁面下入多個線上Ace編輯器與執行按鈕（ practice_html.txt \xa0 動態頁面超檔案）。 \n Practice_html.txt \xa0 動態頁面超檔案應該可以在啟動 Brython 時，設定會將 .py 檔案放入 downloads/py 目錄中引用。 \n 也即將所有對應的html也使用Brython產生，然後寫為 類別 後，在範例導入時透過 實例 引用 \xa0 \xa0 \xa0 \xa0 \n <!-- 啟動 Brython --> \n<腳本> \n視窗.onload=函數(){ \nbrython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']}); \n} \n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator \xa0 相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n \n \n \n 1 \n 2 \n \n sum \xa0 = \xa0 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 \n \n \n \n \n print ( sum ) \n \n \n \n Filename: \xa0 .py \xa0 \n \n \n \n \n Run\xa0 Output \xa0 清除輸出區 清除繪圖區 Reload \n \n \n \n \n \n \n \n \n \n", 'tags': '', 'url': 'W11.html'}, {'title': 'W13', 'text': '利用 wsgi_v2_py 擷取個學期的課表 \n 一年級上學期的課表 \n 將上方的連結下載後放入可攜，儲存後放入cmd \n 要先確認是否有flask和flask-cors \n 輸入 \n pip list \n 如果有就可執行下面內容 \n cd tmp \n python wsgi_v2.py \n 即可開啟班級課表 \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'W13.html'}, {'title': 'Replit', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h % \n', 'tags': '', 'url': 'Replit.html'}, {'title': '課程期中整理', 'text': '', 'tags': '', 'url': '課程期中整理.html'}, {'title': '網頁式內容管理', 'text': '\n 1.如何建立 Github 上的網站? \n \n \n 创建一个仓库：  在GitHub上创建一个新的仓库，按照前面提到的步骤，命名为“username.github.io”。 \n \n \n 上传网站文件：  将您的网站文件上传到该仓库中。这些文件可以是HTML、CSS、JavaScript等。 \n \n \n 启用GitHub Pages：  在仓库设置中选择要用作GitHub Pages的源，并启用GitHub Pages服务。 \n \n \n 等待部署完成：  GitHub Pages会自动构建和部署您的网站，等待部署完成。 \n \n \n 访问您的网站：  一旦部署完成，您可以通过访问“ https://username.github.io”来查看您的网站。 \n \n \n 2.如 何管理內容? \n \n 更新文件：  每当需要更新网站内容时，只需将新的文件或更新上传到GitHub仓库中。 \n 版本控制：  使用Git进行版本控制，跟踪更改并回滚到需要的版本。 \n 分支管理：  使用Git分支进行开发和测试，然后将更改合并到主分支中。 \n \n 3.如何建立章節式網站? \n \n 使用HTML和CSS来创建不同章节的页面。 \n 使用导航栏或侧边栏来导航到不同的章节。 \n \n 4.能放入甚麼多媒體內容? \n \n 静态图文：  在HTML中插入图片和文字。 \n 动态图文：  使用JavaScript或CSS动画来创建动态效果。 \n 在线游戏：  将游戏嵌入到网页中，可以使用HTML5 Canvas或WebGL等技术。 \n 3D零件展示：  使用JavaScript库（如Three.js）创建和展示3D模型。 \n \n 5.靜態圖文? \n \n \n 创建一个仓库：  在GitHub上创建一个新的仓库，用于托管您的静态图文内容。 \n \n \n 编写HTML和CSS：  使用您喜欢的文本编辑器编写HTML和CSS代码来创建您的静态页面。在HTML中，您可以使用标签来定义文本内容和图像，并使用CSS来样式化页面。 \n \n \n 上传文件：  将您编写的HTML和CSS文件上传到GitHub仓库中。确保所有的图片和其他媒体文件也一并上传到仓库中。 \n \n \n 启用GitHub Pages：  在仓库的设置页面中，选择要用作GitHub Pages的源，并启用GitHub Pages服务。这样，您的静态网页将可以通过GitHub Pages进行托管，并可以通过您的GitHub Pages域名访问。 \n \n \n 等待部署完成：  GitHub Pages会自动构建和部署您的静态页面，等待部署完成。 \n \n \n 访问您的静态页面：  一旦部署完成，您可以通过访问您的GitHub Pages域名（通常是“ https://username.github.io/repositoryname”）来查看您的静态页面。 \n \n \n 6.動態圖文? \n \n \n 创建一个仓库：  在GitHub上创建一个新的仓库，用于托管您的动态图文内容。 \n \n \n 编写HTML、CSS和JavaScript： \n \n HTML：定义页面结构和内容。 \n CSS：样式化页面元素，使其看起来更加美观。 \n JavaScript：添加交互式功能和动态效果。 \n \n \n \n 上传文件：  将您编写的HTML、CSS和JavaScript文件以及其他必要的资源（如图片、音频、视频等）上传到GitHub仓库中。 \n \n \n 启用GitHub Pages：  在仓库的设置页面中，选择要用作GitHub Pages的源，并启用GitHub Pages服务。 \n \n \n 等待部署完成：  GitHub Pages会自动构建和部署您的动态页面，等待部署完成。 \n \n \n 访问您的动态页面：  一旦部署完成，您可以通过访问您的GitHub Pages域名来查看您的动态页面。 \n \n \n 7.線上遊戲? \n \n \n 创建一个仓库：  在GitHub上创建一个新的仓库，用于托管您的在线游戏内容。 \n \n \n 编写HTML、CSS和JavaScript： \n \n HTML：定义游戏的结构和布局。 \n CSS：样式化游戏元素，使其看起来更加美观。 \n JavaScript：实现游戏的逻辑和交互功能。 \n \n \n \n 上传文件：  将您编写的HTML、CSS和JavaScript文件以及游戏所需的其他资源（如图像、音频、视频等）上传到GitHub仓库中。 \n \n \n 启用GitHub Pages：  在仓库的设置页面中，选择要用作GitHub Pages的源，并启用GitHub Pages服务。 \n \n \n 等待部署完成：  GitHub Pages会自动构建和部署您的游戏页面，等待部署完成。 \n \n \n 访问您的游戏页面：  一旦部署完成，您可以通过访问您的GitHub Pages域名来玩游戏。 \n \n \n 8.3D 零組件展示? \n \n \n 创建一个仓库：  在GitHub上创建一个新的仓库，用于托管您的3D零组件展示内容。 \n \n \n 编写HTML、CSS和JavaScript： \n \n HTML：定义包含3D场景的页面结构。 \n CSS：为页面元素添加样式。 \n JavaScript：使用WebGL或其他3D库（如Three.js）来创建和渲染3D场景。 \n \n \n \n 上传文件：  将您编写的HTML、CSS和JavaScript文件以及展示所需的其他资源（如3D模型文件、纹理、音频等）上传到GitHub仓库中。 \n \n \n 启用GitHub Pages：  在仓库的设置页面中，选择要用作GitHub Pages的源，并启用GitHub Pages服务。 \n \n \n 等待部署完成：  GitHub Pages会自动构建和部署您的展示页面，等待部署完成。 \n \n \n 访问您的展示页面：  一旦部署完成，您可以通过访问您的GitHub Pages域名来查看您的3D零组件展示。 \n \n \n 9.如何建立網頁系統中的網誌? \n \n 使用静态网页生成器（如Jekyll、Hugo等）创建博客网站。 \n 将博客文章以Markdown格式编写，然后生成HTML页面。 \n \n 10.如何建立網頁系統中的簡報? \n \n 使用HTML和CSS创建简报页面。 \n 使用JavaScript库（如reveal.js）来提供简报的交互性和动画效果。 \n \n', 'tags': '', 'url': '網頁式內容管理.html'}, {'title': 'Python 程式系統', 'text': '1.如何利用電腦輔助設計室的舊 Python 建立新的可攜環境? \n \n \n 安裝虛擬環境管理工具：  如果您的舊Python版本尚未安裝虛擬環境管理工具，您可以使用 virtualenv 或 conda 等工具來創建新的可攜環境。 \n \n \n 創建新的虛擬環境：  使用所選擇的虛擬環境管理工具，創建一個新的虛擬環境，並指定新環境的Python版本和其他相關依賴庫。 \n \n \n 安裝必要的套件：  在新的虛擬環境中，使用 pip 或 conda 等套件管理工具，安裝您需要的Python套件和其他相關軟體。 \n \n \n 測試新環境：  確保新環境可以正常運行您的Python程式，並滿足您的需求。 \n \n \n 2.在網頁中置入 Python 語法的程式加上對 Javascript 與超文件語法的了解後, 能夠應用在那些領域? \n \n \n 教育和學習平台：  您可以建立教育和學習平台，讓學生在網頁上進行Python編程練習。透過將Python解釋器嵌入到網頁中，學生可以直接在瀏覽器中編寫和執行Python程式碼，從而提高他們的編程技能。 \n \n \n 科學計算和數據分析：  您可以在網頁上提供科學計算和數據分析的工具，讓用戶能夠使用Python庫（如NumPy、SciPy、Pandas等）進行數據處理、統計分析和機器學習等任務。 \n \n \n 網站和應用程式開發：  使用Python的網頁框架（如Django、Flask等），您可以開發具有動態功能的網站和Web應用程式。結合JavaScript和HTML，您可以實現豐富的用戶界面和互動效果。 \n \n \n 遊戲開發：  您可以使用Python來開發簡單的網頁遊戲，並利用JavaScript來實現遊戲的互動性和動畫效果。這種組合可以讓您創建出引人入勝的網頁遊戲。 \n \n \n 嵌入式系統和物聯網（IoT）：  使用Python的嵌入式系統庫（如MicroPython），您可以在網頁上控制和監控連接到互聯網的設備。結合JavaScript和HTML，您可以建立具有實時更新和互動性的物聯網應用程式。 \n \n \n 3.(精密)機械設計流程? \n 您可以使用Python來進行機械設計流程中的各種任務，如參數化建模、數值模擬、優化等。同時，您可以將Python腳本嵌入到網頁中，以便在網頁上運行模擬或顯示設計結果。 \n 4.設計運算? \n 您可以使用Python來進行各種設計運算，如結構分析、流體動力學模擬、熱分析等。將Python與網頁結合，您可以構建互動式的模擬界面，讓用戶能夠通過網頁來設置參數、運行模擬並查看結果。 \n 5.特定系統模擬? \n 如果您需要模擬特定系統的行為，例如電路、控制系統、機器學習模型等，Python通常是一個很好的選擇。您可以使用Python來編寫模擬程式，並將其集成到網頁中，以便用戶能夠在網頁上運行模擬並與之進行互動。 \n \n', 'tags': '', 'url': 'Python 程式系統.html'}, {'title': '網頁上的 IDE', 'text': '\n 1.IDE 是甚麼? \n IDE代表集成開發環境（Integrated Development Environment），是一種統一的軟體應用程式，提供了開發人員在一個統一的界面中進行軟體開發所需的各種工具和功能，例如程式碼編輯器、編譯器、調試器、版本控制系統等。IDE旨在提高開發效率和程式碼品質，並為開發人員提供便捷的開發工作流程。 \n 2.可以將 Replit、Codespaces 與 Gitpod 當成 IDE 用來開發各種程式嗎? \n \n \n 線上開發環境：  Replit、Codespaces和Gitpod都是基於網頁的開發工具，不需要在本地安裝任何軟體，只需通過瀏覽器就可以開始開發。 \n \n \n 集成工具：  它們提供了集成的程式碼編輯器、調試器、版本控制、終端機等工具，讓開發人員可以在同一個界面中進行所有的開發工作。 \n \n \n 多人協同：  它們支持多人同時編輯和協同開發，多個開發人員可以在同一個項目中協同工作，實時地查看和編輯彼此的程式碼。 \n \n \n 3.與近端操作系統上的開發有何不同? \n \n \n 線上存儲和編輯：  在Replit、Codespaces和Gitpod中，您的專案是存儲在雲端的，您可以通過瀏覽器直接在網頁上編輯和運行程式碼，而不需要在本地安裝任何開發工具。 \n \n \n 環境配置：  在Replit、Codespaces和Gitpod中，開發環境的配置是自動完成的，您無需手動安裝和配置開發工具，這使得開發環境的搭建更加簡便。 \n \n \n 即時協同編輯：  Replit、Codespaces和Gitpod支持多人同時編輯和協同開發，多個開發人員可以在同一個項目中實時地查看和編輯彼此的程式碼。 \n \n \n 4.多人協同? \n \n \n 同步編輯：  多人在同一個項目中編輯程式碼時，IDE會實時地同步彼此的變更，這樣每個人都可以看到其他人的操作，並立即看到程式碼的最新狀態。 \n \n \n 即時通訊：  IDE通常提供內建的即時通訊功能，用於在團隊成員之間進行交流和討論。這使得開發人員能夠在協同開發的過程中進行溝通，解決問題，並分享想法。 \n \n \n 版本控制整合：  多人協同開發通常與版本控制系統（如Git）整合，這樣團隊成員可以方便地提交、拉取和合併程式碼變更，並跟蹤整個開發過程的歷史記錄。 \n \n \n 變更追蹤和回退：  IDE會記錄每個開發人員對程式碼的變更，包括誰進行了哪些變更以及何時進行的。這樣團隊成員可以追蹤程式碼的變更歷史，並在需要時回退到先前的版本。 \n \n \n 5.這樣安全嗎? \n \n \n 方便快捷：  網頁IDE通常具有快速啟動和輕量級的特點，無需在本地安裝軟體，只需通過瀏覽器即可開始編程工作，這使得開發過程更加方便快捷。 \n \n \n 跨平台性：  由於網頁IDE是基於瀏覽器運行的，因此可以在不同的作業系統和設備上使用，具有良好的跨平台性，使得開發人員能夠在不同的環境中進行工作。 \n \n \n 即時協同：  多數網頁IDE支持多人協同開發，讓團隊成員能夠同時編輯同一個程式碼檔案，並能夠即時地看到彼此的變更，這提高了團隊之間的溝通和協作效率。 \n \n \n 環境配置簡單：  使用網頁IDE不需要進行複雜的環境配置，大多數IDE會自動配置所需的開發環境，使得新手能夠更輕鬆地入門。 \n \n \n 功能豐富：  儘管網頁IDE比起本地IDE可能功能有所限制，但仍具備許多常用的開發工具和功能，例如程式碼編輯器、調試器、版本控制等，能夠滿足大多數開發需求。 \n \n \n \n 6.學會使用網頁上的各種 IDE 之後, 有沒有甚麼感想或心得? \n \n \n 方便快捷：  網頁IDE通常具有快速啟動和輕量級的特點，無需在本地安裝軟體，只需通過瀏覽器即可開始編程工作，這使得開發過程更加方便快捷。 \n \n \n 跨平台性：  由於網頁IDE是基於瀏覽器運行的，因此可以在不同的作業系統和設備上使用，具有良好的跨平台性，使得開發人員能夠在不同的環境中進行工作。 \n \n \n 即時協同：  多數網頁IDE支持多人協同開發，讓團隊成員能夠同時編輯同一個程式碼檔案，並能夠即時地看到彼此的變更，這提高了團隊之間的溝通和協作效率。 \n \n \n 環境配置簡單：  使用網頁IDE不需要進行複雜的環境配置，大多數IDE會自動配置所需的開發環境，使得新手能夠更輕鬆地入門。 \n \n \n 功能豐富：  儘管網頁IDE比起本地IDE可能功能有所限制，但仍具備許多常用的開發工具和功能，例如程式碼編輯器、調試器、版本控制等，能夠滿足大多數開發需求。 \n \n \n \n', 'tags': '', 'url': '網頁上的 IDE.html'}, {'title': 'AI 工具', 'text': '1.ChatGPT 與 Gemini Pro 都可以直接利用 Gmail 帳號登入, 初級應用目前都可免費使用, 這兩個 AI 工具可以協助我們解決甚麼問題? \n ChatGPT： \n \n 自然語言理解和生成：  ChatGPT可以理解自然語言的問題並生成相應的回答，這使得它能夠用於對話式問答、客服應用、智能助手等領域。 \n 知識提供：  ChatGPT可以根據用戶提出的問題提供相關的知識和信息，這使得它能夠用於網路搜索、資訊查詢等應用。 \n 創意激發：  ChatGPT可以生成文字內容，包括故事、詩歌、文章等，這使得它能夠用於寫作輔助、創意產生等場景。 \n \n Gemini Pro： \n \n 智能分析和預測：  Gemini Pro是一個基於人工智慧的分析平台，可以用於數據分析、預測建模等任務，幫助用戶更好地理解數據和做出決策。 \n 自動化工作流程：  Gemini Pro可以自動化一些重複性工作流程，減輕用戶的工作負擔，提高工作效率。 \n 可視化呈現：  Gemini Pro可以通過視覺化的方式呈現數據和分析結果，使得用戶更容易理解和使用數據。 \n \n 2.為什麼有人驚這些工具為天人? \n 對於那些尚未接觸過人工智慧技術的人來說，ChatGPT和Gemini Pro的能力可能會給人一種超越人類智慧的感覺，因為它們能夠理解自然語言、自動分析數據，並提供智能化的解決方案，這對於一些人來說可能是非常令人印象深刻的。 \n 3.有人卻覺得還好而已, 並無法從中挖出甚麼資料? \n  而對於那些對於人工智慧技術有所了解的人來說，ChatGPT和Gemini Pro僅僅是工具而已，它們的能力是基於模型訓練和算法演算的，並不能真正理解問題的含義或做出人類級別的推理。因此，這些人可能會覺得這些工具雖然有用，但並沒有到達天人的地步，並且在某些場景下可能並無法提供所需的資料或解決方案。 \n 4.AI 工具曾經協助我們解決甚麼問題? \n \n \n \n 自然語言處理（NLP）： \n \n 搜索引擎：AI技術被用於搜索引擎中，幫助用戶快速找到他們想要的信息。 \n 智能助手：像Siri、Alexa和Google Assistant這樣的智能助手利用NLP技術來理解用戶的指令並提供相應的回答或服務。 \n 文字分析：AI工具可以分析大量的文字數據，從中提取信息、分類文本或進行情感分析等任務。 \n \n \n \n 圖像識別和計算機視覺： \n \n 醫學影像分析：AI技術被應用於醫學影像，幫助醫生快速識別疾病跡象或進行診斷。 \n 自動駕駛技術：AI在自動駕駛領域發揮了重要作用，通過圖像識別技術幫助車輛識別和理解周圍環境。 \n \n \n \n 數據分析和預測： \n \n 風險評估：金融機構利用AI技術進行風險評估，幫助他們評估客戶的信用風險 \n \n \n \n \n \n 、預測市場趨勢等。 \n \n 預測疾病擴散：在公共衛生領域，AI技術被用於分析疾病數據，預測疾病擴散的趨勢，幫助政府和醫療機構制定應對策略。 \n \n \n 自動化和機器人技術： \n \n 生產自動化：AI機器人被用於生產線上的自動化任務，提高生產效率和質量。 \n 客戶服務機器人：許多企業利用AI技術開發了客戶服務機器人，用於自動回答常見問題、處理客戶查詢等。 \n \n \n \n \n', 'tags': '', 'url': 'AI 工具.html'}, {'title': '實作練習問題', 'text': '1.一份採 UTF-8 中文編碼的 .csv (例如: \xa0 5j_wcm2024_midterm.csv )在 Windows Excel 2016 開啟之後呈現亂碼, 該如何設定改為用 UTF-8 編碼? \n \n 開啟  Excel 2016 ： 點擊開啟 Excel 2016 應用程式。 \n 匯入  CSV  檔案： \n \n 在 Excel 中選擇「資料」選項卡。 \n 點擊「從文字」或「從文字檔案」選項。 \n \n \n 選擇  CSV  檔案： \n \n 瀏覽您的電腦，找到並選擇要匯入的 CSV 檔案。 \n \n \n 指定正確的編碼： \n \n 在打開檔案的對話框中，選擇正確的檔案編碼。 \n 在「檔案來源」設定中，選擇「Unicode (UTF-8)」。 \n 確認「文件原始格式」設定為「分隔字元」，並設置正確的分隔符號（通常是逗號或分號）。 \n \n \n 匯入  CSV  檔案： \n \n 點擊「讀取」或「匯入」按鈕，將 CSV 檔案匯入 Excel。 \n \n \n 檢查文字顯示： \n \n 檢查匯入後的資料是否正確顯示中文文字，確保沒有亂碼。 \n \n \n 儲存檔案： \n \n 如果所有文字都正確顯示，您可以將檔案另存為 CSV 格式。 \n 選擇「檔案」>「另存為」，選擇 CSV 格式，並在儲存時確保選擇 UTF-8 編碼 \n \n \n \n 2.請根據上一個 .csv (csv 是甚麼格式的資料?) 檔案內容, 在個人的網頁與網誌中列出每一位學員的 github wcm2024 倉儲與網頁連結. (第一次請直接用手動輸入的方式建立 html 檔案內容, 之後再思考如何讀取此一檔案後, 能直接將所需要的倉儲與網頁連結呈現在個人網站或網誌的特定位置) \n 請根據上一個 .csv (csv 是甚麼格式的資料?) 檔案內容, 在個人的網頁與網誌中列出每一位學員的 github wcm2024 倉儲與網頁連結. (第一次請直接用手動輸入的方式建立 html 檔案內容, 之後再思考如何讀取此一檔案後, 能直接將所需要的倉儲與網頁連結呈現在個人網站或網誌的特定位置) \n 3. 這一本書 \xa0 的第一章在講甚麼?能不能將其中練習編寫的內容, 放入個人的網頁與網誌? \n 4.為什麼 wcm2024 倉儲中的 cms.bat 在 Windows 啟動之後, 若同時多人連線, 系統會無法負荷, 同一台電腦硬體有沒有可能採其他方法啟動, 可以同時讓多人連線且不會產生延遲或停頓的問題? 例如採 wsgi 方式啟動, 這該如何進行? 當設定好讓 Flask 編寫的網際內容管理系統透過效率較高的 wsgi 模式執行後, 如何讓執行程式與電腦開機同步執行? 直接執行套件與透過 Windows services 執行有何不同? NSSM 是什麼工具? \n 當多個用戶同時連線到一台電腦運行的服務時，效能問題常常會出現。在 Windows 系統中，使用 .bat 檔案直接啟動服務可能會導致效能瓶頸。一種更好的方法是使用 WSGI（Web Server Gateway Interface）來啟動 Flask 應用程序。WSGI 是 Python Web 應用程序的標準接口，它允許 Web 服務器與 Python 應用程序之間進行通信，提供了更好的性能和可擴展性。要將 Flask 應用程序轉換為 WSGI 模式，你可以使用像 Gunicorn、uWSGI 或 mod_wsgi 等 WSGI 伺服器來運行你的應用程序。這些伺服器能夠處理多個同時連線，並且通常比直接運行 Flask 應用程序的方法效率更高。讓執行程式與電腦開機同步執行，你可以將其設置為作為一個服務（Service）在 Windows 啟動時自動運行。這可以通過 Windows 服務管理員來完成，或者使用特定的工具如 NSSM（Non-Sucking Service Manager）。NSSM 是一個常用的工具，用於在 Windows 上創建和管理服務。它允許你將任何可執行文件轉換為 Windows 服務，並提供了許多進階功能，如日誌記錄、重新啟動策略等。直接執行套件和透過 Windows services 執行之間的主要區別在於穩定性和管理性。使用 Windows services 可以更方便地管理服務，例如設置啟動參數、自動重啟、記錄事件等，同時使得這些服務在系統啟動時自動運行，而無需任何用戶交互。總之，對於運行 Flask 應用程序，特別是在多個用戶同時訪問時，建議使用 WSGI 伺服器來提高性能和穩定性，同時將其設置為 Windows 服務，以確保其在系統啟動時自動運行並具有更好的管理性。 \n 5.如何在一台 Windows (Ubuntu) 電腦快速建立多人帳號? 建立多人帳號之後, 如何透過程式將帳號密碼寄給使用者? \n Windows 上，你可以通過以下步驟來建立多個用戶帳號： \n \n 打開「控制台」。 \n 選擇「用戶帳戶」。 \n 選擇「新增或移除用戶帳戶」。 \n 點擊「新增用戶帳戶」。 \n 輸入新用戶的名稱。 \n 選擇帳戶類型，可以是「管理員」或「標準使用者」。 \n 如果需要，為新用戶設置密碼。 \n 完成後，按「完成」。 \n \n 6.承接上一題: 一個採用 Flask 編寫的伺服器系統, 該如何在 Windows 環境中以 wsgi 方式啟動? \n \n \n 確保你已經安裝了 Python，以及需要的 Flask 套件。 \n \n \n 安裝 Gunicorn \n \n 創建一個啟動腳本（例如  run_server.bat ），在其中指定要啟動的 Flask 應用程序。 \n \n 在 Windows 中執行  run_server.bat  腳本即可啟動 Flask 應用程序。 \n \n \n 7.wcm2024 課程中曾經提到可以利用舊的可攜 Python 程式環境建立新的 Python 可攜程式環境, 但該如何進行? \n \n \n 獲取舊的可攜式 Python 程式環境：如果你已經擁有一個可攜式 Python 環境，你可以使用該環境作為模板來創建新的虛擬環境。你可以從你的舊環境目錄中複製所有文件和文件夾，並將其用作新的虛擬環境的起點。 \n \n \n 創建新的虛擬環境：在新的目錄中，打開命令提示符或終端機，並運行以下命令來創建新的虛擬環境 \n \n 啟動虛擬環境：在命令提示符或終端機中，運行以下命令來啟動新的虛擬環境 \n \n 安裝所需的套件：一旦虛擬環境啟動，你就可以使用 pip 指令來安裝任何你需要的Python套件，就像在普通的Python環境中一樣。 \n \n \n \n 8.如果希望直接在網頁中利用Brython建立一個掃地機器人的工作模擬系統，該如何進行？ \n \n \n 準備HTML檔案 ：首先，建立一個HTML文件，其中包含掃地機器人模擬的介面和必要的元素。 \n \n \n 引入 Brython ：在 HTML 文件中引入 Brython 的 JavaScript 文件，以便在網頁中運行 Python 程式碼。 \n \n \n 編寫Brython程式碼 ：在HTML檔案中編寫Brython程式程式碼，來模擬掃地機器人的行為。 \n \n \n 設計掃地機器人模擬簡介 ：設計一個用於控制掃地機器人模擬的網頁介面，例如按鈕或按鈕，使用者可以透過這些介面來控制機器人的動作。 \n \n \n 9.wcm2024課程除了可以使用 ChatGPT 外，還能夠使用Google  Gemini Pro ，請嘗試在解決上列問題時，善用這兩個系統，這使用過程與心得整理在個人的課程網頁與網誌中。 \xa0 \xa0 \xa0 \n 當我們解決機器人的工作模擬系統問題時，利用ChatGPT和Google Gemini Pro可以帶來不同的優勢和體驗。 \n ChatGPT作為一個語言模型，可以幫助我們理解問題的本質，提供技術方面的解釋和建議。 \n 另一方面，Google Gemini Pro 是一個強大的工具，可以幫助我們搜尋和尋找技術文件、教學和範例程式碼。 \n 在解決問題的過程中，我們可以先向 ChatGPT 提問，了解基本的理解和指導，並利用 Google Gemini Pro 進一步尋找相關資源和詳細教學。 \n 將這個過程和心得整理在個人課程網頁和網誌中，可以幫助我們記錄自己的學習過程和心得知識，同時也可以與他人分享這個寶貴的學習經驗，並幫助更多的人一起成長和進步。 \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n ChatGP \n \n \n \n \n \n \n \n', 'tags': '', 'url': '實作練習問題.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_（程式語言） \n 例子： \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python教學： \n https://docs.python.org/3/tutorial/ \n Python的平衡介紹 \n 縮排（Python採用4個Spaces縮排，以介面執行範圍） \n 變數（ Python 關鍵字 ） \n 註（#單行註解、三單標註或三雙標註標註多行註解） \n 數 (整數 int(), 浮點數 float()) \n 字符串 （字串） \n print (Python 內建函數,  print() 函數式) \n Python是控制流程工具 \n 為了 \n 如果 \n 範圍 \n 開放 \n 讀 \n 清單 \n 元組 \n 字典 \n 功能 \n 嘗試...除了 \n 休息時間 \n 曾經 \n 類別 \n 此頁面示範如何在同一頁面下加入多個線上Ace編輯器與執行按鈕（ practice_html.txt 動態頁面超檔案）。 \n Practice_html.txt 動態頁面超檔案應該可以在啟動Brython時，設定分割.py檔案放入downloads/py目錄中的參考。 \n 也所有即將出現的對應 html 也使用 Brython 產生，然後編寫為 類別 後，在範例匯入時交叉 實例 引用。 \n <!-- 啟動 Brython --> \n<腳本> \n視窗.onload=函數(){ \nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']}); \n} \n</> 腳本 \n 從1累加到100： \n 1加到100 \n 將 iterable 與 iterator 相關說明 ，利用 Brython 與 Ace Editor 整理頁面。 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n 文件名稱： .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n 跑步   輸出   明確輸出區 清晰的繪圖區 重新載入 \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從1累加到100第2部分： \n 1加到100 cango_三_齒輪 BS蛇 人工智能俄羅斯區塊鏈 旋轉塊 \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n 文件名稱： .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n 跑步   輸出   明確輸出區 清晰的繪圖區 重新載入 \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};