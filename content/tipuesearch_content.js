var tipuesearch = {"pages": [{'title': 'About', 'text': '網頁: https://41223152.github.io/wcm2024/ \n 網誌:\xa0 https://41223152.github.io/wcm2024/blog/ \n 簡報:\xa0 https://41223152.github.io/wcm2024/reveal/ \n 倉儲:\xa0 https://github.com/41223152/wcm2024 \n 本 cmsimde 網際內容管理系統的對應 Template 倉儲: \n https://github.com/mdecycu/cmsimde_site \n 此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改 \n 倉儲對應網站:  https://mde.tw/cmsimde_site \n', 'tags': '', 'url': 'About.html'}, {'title': 'cmsimde', 'text': "SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': 'Replit', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h % \n', 'tags': '', 'url': 'Replit.html'}, {'title': '課程期中整理', 'text': '', 'tags': '', 'url': '課程期中整理.html'}, {'title': '網頁上的 IDE', 'text': '', 'tags': '', 'url': '網頁上的 IDE.html'}, {'title': '1.IDE 是甚麼?', 'text': 'IDE代表集成開發環境（Integrated Development Environment），是一種統一的軟體應用程式，提供了開發人員在一個統一的界面中進行軟體開發所需的各種工具和功能，例如程式碼編輯器、編譯器、調試器、版本控制系統等。IDE旨在提高開發效率和程式碼品質，並為開發人員提供便捷的開發工作流程。 \n', 'tags': '', 'url': '1.IDE 是甚麼?.html'}, {'title': '2.可以將 Replit、Codespaces 與 Gitpod 當成 IDE 用來開發各種程式嗎?', 'text': '\n \n 線上開發環境：  Replit、Codespaces和Gitpod都是基於網頁的開發工具，不需要在本地安裝任何軟體，只需通過瀏覽器就可以開始開發。 \n \n \n 集成工具：  它們提供了集成的程式碼編輯器、調試器、版本控制、終端機等工具，讓開發人員可以在同一個界面中進行所有的開發工作。 \n \n \n 多人協同：  它們支持多人同時編輯和協同開發，多個開發人員可以在同一個項目中協同工作，實時地查看和編輯彼此的程式碼。 \n \n \n', 'tags': '', 'url': '2.可以將 Replit、Codespaces 與 Gitpod 當成 IDE 用來開發各種程式嗎?.html'}, {'title': '3.與近端操作系統上的開發有何不同?', 'text': '\n \n 線上存儲和編輯：  在Replit、Codespaces和Gitpod中，您的專案是存儲在雲端的，您可以通過瀏覽器直接在網頁上編輯和運行程式碼，而不需要在本地安裝任何開發工具。 \n \n \n 環境配置：  在Replit、Codespaces和Gitpod中，開發環境的配置是自動完成的，您無需手動安裝和配置開發工具，這使得開發環境的搭建更加簡便。 \n \n \n 即時協同編輯：  Replit、Codespaces和Gitpod支持多人同時編輯和協同開發，多個開發人員可以在同一個項目中實時地查看和編輯彼此的程式碼。 \n \n \n', 'tags': '', 'url': '3.與近端操作系統上的開發有何不同?.html'}, {'title': '4.多人協同?', 'text': '\n \n 同步編輯：  多人在同一個項目中編輯程式碼時，IDE會實時地同步彼此的變更，這樣每個人都可以看到其他人的操作，並立即看到程式碼的最新狀態。 \n \n \n 即時通訊：  IDE通常提供內建的即時通訊功能，用於在團隊成員之間進行交流和討論。這使得開發人員能夠在協同開發的過程中進行溝通，解決問題，並分享想法。 \n \n \n 版本控制整合：  多人協同開發通常與版本控制系統（如Git）整合，這樣團隊成員可以方便地提交、拉取和合併程式碼變更，並跟蹤整個開發過程的歷史記錄。 \n \n \n 變更追蹤和回退：  IDE會記錄每個開發人員對程式碼的變更，包括誰進行了哪些變更以及何時進行的。這樣團隊成員可以追蹤程式碼的變更歷史，並在需要時回退到先前的版本。 \n \n \n', 'tags': '', 'url': '4.多人協同?.html'}, {'title': '5.這樣安全嗎?', 'text': 'Replit、Codespaces和Gitpod通常會提供安全措施來保護使用者的數據和程式碼，例如加密通訊、防火牆、存取控制等。然而，使用線上開發環境也可能會存在一些安全風險，例如敏感數據的存儲和傳輸，因此在使用這些工具時，使用者還是需要注意保護自己的數據和隱私。', 'tags': '', 'url': '5.這樣安全嗎?.html'}, {'title': 'Python 程式系統', 'text': '', 'tags': '', 'url': 'Python 程式系統.html'}, {'title': '1.如何利用電腦輔助設計室的舊 Python 建立新的可攜環境?', 'text': '\n \n 安裝虛擬環境管理工具：  如果您的舊Python版本尚未安裝虛擬環境管理工具，您可以使用 virtualenv 或 conda 等工具來創建新的可攜環境。 \n \n \n 創建新的虛擬環境：  使用所選擇的虛擬環境管理工具，創建一個新的虛擬環境，並指定新環境的Python版本和其他相關依賴庫。 \n \n \n 安裝必要的套件：  在新的虛擬環境中，使用 pip 或 conda 等套件管理工具，安裝您需要的Python套件和其他相關軟體。 \n \n \n 測試新環境：  確保新環境可以正常運行您的Python程式，並滿足您的需求。 \n \n \n', 'tags': '', 'url': '1.如何利用電腦輔助設計室的舊 Python 建立新的可攜環境?.html'}, {'title': '2.在網頁中置入 Python 語法的程式加上對 Javascript 與超文件語法的了解後, 能夠應用在那些領域?', 'text': '\n \n 教育和學習平台：  您可以建立教育和學習平台，讓學生在網頁上進行Python編程練習。透過將Python解釋器嵌入到網頁中，學生可以直接在瀏覽器中編寫和執行Python程式碼，從而提高他們的編程技能。 \n \n \n 科學計算和數據分析：  您可以在網頁上提供科學計算和數據分析的工具，讓用戶能夠使用Python庫（如NumPy、SciPy、Pandas等）進行數據處理、統計分析和機器學習等任務。 \n \n \n 網站和應用程式開發：  使用Python的網頁框架（如Django、Flask等），您可以開發具有動態功能的網站和Web應用程式。結合JavaScript和HTML，您可以實現豐富的用戶界面和互動效果。 \n \n \n 遊戲開發：  您可以使用Python來開發簡單的網頁遊戲，並利用JavaScript來實現遊戲的互動性和動畫效果。這種組合可以讓您創建出引人入勝的網頁遊戲。 \n \n \n 嵌入式系統和物聯網（IoT）：  使用Python的嵌入式系統庫（如MicroPython），您可以在網頁上控制和監控連接到互聯網的設備。結合JavaScript和HTML，您可以建立具有實時更新和互動性的物聯網應用程式。 \n \n \n', 'tags': '', 'url': '2.在網頁中置入 Python 語法的程式加上對 Javascript 與超文件語法的了解後, 能夠應用在那些領域?.html'}, {'title': '3.(精密)機械設計流程?', 'text': '您可以使用Python來進行機械設計流程中的各種任務，如參數化建模、數值模擬、優化等。同時，您可以將Python腳本嵌入到網頁中，以便在網頁上運行模擬或顯示設計結果。 \n', 'tags': '', 'url': '3.(精密)機械設計流程?.html'}, {'title': '4.設計運算?', 'text': '您可以使用Python來進行各種設計運算，如結構分析、流體動力學模擬、熱分析等。將Python與網頁結合，您可以構建互動式的模擬界面，讓用戶能夠通過網頁來設置參數、運行模擬並查看結果。 \n', 'tags': '', 'url': '4.設計運算?.html'}, {'title': '5.特定系統模擬?', 'text': '如果您需要模擬特定系統的行為，例如電路、控制系統、機器學習模型等，Python通常是一個很好的選擇。您可以使用Python來編寫模擬程式，並將其集成到網頁中，以便用戶能夠在網頁上運行模擬並與之進行互動。 \n', 'tags': '', 'url': '5.特定系統模擬?.html'}, {'title': '網頁式內容管理', 'text': '\n', 'tags': '', 'url': '網頁式內容管理.html'}, {'title': '1.如何建立 Github 上的網站?', 'text': '\n \n 创建一个仓库：  在GitHub上创建一个新的仓库，按照前面提到的步骤，命名为“username.github.io”。 \n \n \n 上传网站文件：  将您的网站文件上传到该仓库中。这些文件可以是HTML、CSS、JavaScript等。 \n \n \n 启用GitHub Pages：  在仓库设置中选择要用作GitHub Pages的源，并启用GitHub Pages服务。 \n \n \n 等待部署完成：  GitHub Pages会自动构建和部署您的网站，等待部署完成。 \n \n \n 访问您的网站：  一旦部署完成，您可以通过访问“ https://username.github.io”来查看您的网站。 \n \n \n 2.如 何管理內容? \n \n 更新文件：  每当需要更新网站内容时，只需将新的文件或更新上传到GitHub仓库中。 \n 版本控制：  使用Git进行版本控制，跟踪更改并回滚到需要的版本。 \n 分支管理：  使用Git分支进行开发和测试，然后将更改合并到主分支中。 \n \n', 'tags': '', 'url': '1.如何建立 Github 上的網站?.html'}, {'title': '3.如何建立章節式網站?', 'text': '\n 使用HTML和CSS来创建不同章节的页面。 \n 使用导航栏或侧边栏来导航到不同的章节。 \n \n', 'tags': '', 'url': '3.如何建立章節式網站?.html'}, {'title': '4.能放入甚麼多媒體內容?', 'text': '\n 静态图文：  在HTML中插入图片和文字。 \n 动态图文：  使用JavaScript或CSS动画来创建动态效果。 \n 在线游戏：  将游戏嵌入到网页中，可以使用HTML5 Canvas或WebGL等技术。 \n 3D零件展示：  使用JavaScript库（如Three.js）创建和展示3D模型。 \n \n', 'tags': '', 'url': '4.能放入甚麼多媒體內容?.html'}, {'title': '5.靜態圖文?', 'text': '\n \n 创建一个仓库：  在GitHub上创建一个新的仓库，用于托管您的静态图文内容。 \n \n \n 编写HTML和CSS：  使用您喜欢的文本编辑器编写HTML和CSS代码来创建您的静态页面。在HTML中，您可以使用标签来定义文本内容和图像，并使用CSS来样式化页面。 \n \n \n 上传文件：  将您编写的HTML和CSS文件上传到GitHub仓库中。确保所有的图片和其他媒体文件也一并上传到仓库中。 \n \n \n 启用GitHub Pages：  在仓库的设置页面中，选择要用作GitHub Pages的源，并启用GitHub Pages服务。这样，您的静态网页将可以通过GitHub Pages进行托管，并可以通过您的GitHub Pages域名访问。 \n \n \n 等待部署完成：  GitHub Pages会自动构建和部署您的静态页面，等待部署完成。 \n \n \n 访问您的静态页面：  一旦部署完成，您可以通过访问您的GitHub Pages域名（通常是“ https://username.github.io/repositoryname”）来查看您的静态页面。 \n \n \n', 'tags': '', 'url': '5.靜態圖文?.html'}, {'title': '6.動態圖文?', 'text': '\n \n 创建一个仓库：  在GitHub上创建一个新的仓库，用于托管您的动态图文内容。 \n \n \n 编写HTML、CSS和JavaScript： \n \n HTML：定义页面结构和内容。 \n CSS：样式化页面元素，使其看起来更加美观。 \n JavaScript：添加交互式功能和动态效果。 \n \n \n \n 上传文件：  将您编写的HTML、CSS和JavaScript文件以及其他必要的资源（如图片、音频、视频等）上传到GitHub仓库中。 \n \n \n 启用GitHub Pages：  在仓库的设置页面中，选择要用作GitHub Pages的源，并启用GitHub Pages服务。 \n \n \n 等待部署完成：  GitHub Pages会自动构建和部署您的动态页面，等待部署完成。 \n \n \n 访问您的动态页面：  一旦部署完成，您可以通过访问您的GitHub Pages域名来查看您的动态页面。 \n \n \n', 'tags': '', 'url': '6.動態圖文?.html'}, {'title': '7.線上遊戲?', 'text': '\n \n 创建一个仓库：  在GitHub上创建一个新的仓库，用于托管您的在线游戏内容。 \n \n \n 编写HTML、CSS和JavaScript： \n \n HTML：定义游戏的结构和布局。 \n CSS：样式化游戏元素，使其看起来更加美观。 \n JavaScript：实现游戏的逻辑和交互功能。 \n \n \n \n 上传文件：  将您编写的HTML、CSS和JavaScript文件以及游戏所需的其他资源（如图像、音频、视频等）上传到GitHub仓库中。 \n \n \n 启用GitHub Pages：  在仓库的设置页面中，选择要用作GitHub Pages的源，并启用GitHub Pages服务。 \n \n \n 等待部署完成：  GitHub Pages会自动构建和部署您的游戏页面，等待部署完成。 \n \n \n 访问您的游戏页面：  一旦部署完成，您可以通过访问您的GitHub Pages域名来玩游戏。 \n \n \n', 'tags': '', 'url': '7.線上遊戲?.html'}, {'title': '8.3D 零組件展示?', 'text': '\n \n 创建一个仓库：  在GitHub上创建一个新的仓库，用于托管您的3D零组件展示内容。 \n \n \n 编写HTML、CSS和JavaScript： \n \n HTML：定义包含3D场景的页面结构。 \n CSS：为页面元素添加样式。 \n JavaScript：使用WebGL或其他3D库（如Three.js）来创建和渲染3D场景。 \n \n \n \n 上传文件：  将您编写的HTML、CSS和JavaScript文件以及展示所需的其他资源（如3D模型文件、纹理、音频等）上传到GitHub仓库中。 \n \n \n 启用GitHub Pages：  在仓库的设置页面中，选择要用作GitHub Pages的源，并启用GitHub Pages服务。 \n \n \n 等待部署完成：  GitHub Pages会自动构建和部署您的展示页面，等待部署完成。 \n \n \n 访问您的展示页面：  一旦部署完成，您可以通过访问您的GitHub Pages域名来查看您的3D零组件展示。 \n \n \n', 'tags': '', 'url': '8.3D 零組件展示?.html'}, {'title': '9.如何建立網頁系統中的網誌?', 'text': '\n 使用静态网页生成器（如Jekyll、Hugo等）创建博客网站。 \n 将博客文章以Markdown格式编写，然后生成HTML页面。 \n \n', 'tags': '', 'url': '9.如何建立網頁系統中的網誌?.html'}, {'title': '10.如何建立網頁系統中的簡報?', 'text': '\n 使用HTML和CSS创建简报页面。 \n 使用JavaScript库（如reveal.js）来提供简报的交互性和动画效果。 \n \n \n', 'tags': '', 'url': '10.如何建立網頁系統中的簡報?.html'}, {'title': '作業', 'text': '', 'tags': '', 'url': '作業.html'}, {'title': 'W6', 'text': '1. \n git 的發展歷史 \n \n \n \n \n \n \n \n \n \n \n \n \n \n Git 是一個分散式版本控制系統，由 Linus Torvalds 於 2005 年創建。Git 的發展歷史可以追溯到 Linux 內核開發過程中的需求。以下是 Git 的發展歷程： \n \n \n 2005 年 ：Linus Torvalds 開始開發 Git。他尋找了一個更好的版本控制系統來管理 Linux 內核的開發，因為 BitKeeper 不再免費提供使用。 \n \n \n 2005 年 4 月 ：Git 的第一個版本（1.0）發布。在開發過程中，許多 Linux 開發者貢獻了代碼，幫助 Git 的成長。 \n \n \n 2005 年至今 ：Git 穩步成長，吸引了全球開發者社區的關注和貢獻。它迅速成為了最受歡迎的版本控制系統之一，廣泛應用於軟體開發領域。 \n \n \n 2008 年 ：GitHub 成立，為 Git 提供了一個流行的主機服務平台，使得開發者可以輕鬆共享和協作。 \n \n \n 2016 年 ：Microsoft 買下 GitHub，這一舉動在開源社區引起了一些爭議，但也為 Git 的發展提供了更多資源和支持。 \n \n \n 2020 年 ：GitHub 宣布啟動代碼移動計劃，計劃將所有項目的主要代碼存儲庫轉移到遠程儲存庫中。這項計劃將加速代碼庫的存取速度，提高性能。 \n \n \n 總的來說，Git 的發展歷史是一個開放和協作的過程，得益於全球開發者社區的不懈努力和貢獻。Git 不僅在軟體開發中得到廣泛應用，還成為了許多領域進行版本控制的首選工具。 \n git創作人的相關履歷 \n \n \n \n \n \n \n \n \n \n \n \n \n \n Git 的創造者是 Linux 核心的創建者 Linus Torvalds。他是一位芬蘭籍的計算機科學家，於 1991 年創建了 Linux 作業系統，並在開源社區中享有極高的聲譽。 \n Linus Torvalds 出生於 1969 年 12 月 28 日，畢業於赫爾辛基大學，主修電腦科學。他在創建 Linux 核心的同時，也是 Git 版本控制系統的創建者和主要開發者。 \n 在他的職業生涯中，Torvalds 曾就職於 Transmeta Corporation 和 Open Source Development Labs。他的工作和貢獻使他成為了開源社區的一個重要人物，並且獲得了多項獎項和榮譽。 \n Torvalds 以其開放、直率和自由的風格而聞名，他在維護 Linux 核心和 Git 項目的過程中始終堅持這一風格。他通過他的工作，為開源軟體的發展和普及做出了重大貢獻。 \n \n \n \n \n \n \n \n 請問git如何應用在Master CAM \n \n \n \n \n \n Git 在機械設計專業中的應用通常不是直接與 Master CAM（一種用於電腦輔助製造的軟體）整合，而是在開發流程中用於版本控制和協作。以下是一些在機械設計專業中使用 Git 的情況： \n \n \n 版本控制 ：機械設計過程中會產生大量的 CAD（電腦輔助設計）文件、製造程序等。使用 Git 可以輕鬆管理這些文件的版本，追蹤更改歷史，並能夠在需要時回復到先前的版本。這使得團隊成員可以同步工作，而不必擔心文件的覆蓋或遺失。 \n \n \n 協作 ：Git 可以使得團隊成員能夠同時進行機械設計項目的協作。他們可以在本地工作，然後通過 Git 將他們的更改推送到共享的遠程存儲庫中。這樣就可以避免文件的碰撞，並確保所有人都在同一頁面上工作。 \n \n \n 分支管理 ：Git 的分支功能使得可以輕鬆地創建新的功能分支或修復分支，而不會影響到主要的開發分支。這對於在機械設計項目中進行不同版本或實驗性工作非常有用。 \n \n \n 代碼審查 ：即使在機械設計中，代碼審查也是一個重要的步驟。Git 的分支和合併功能使得可以輕鬆地進行代碼審查，確保代碼的質量和一致性。 \n \n \n 總的來說，雖然 Git 不是直接與 Master CAM 整合的工具，但它可以作為機械設計專業中的一個強大的版本控制和協作工具，幫助團隊更有效地進行工作。 \n \n 2. 假如要在 Windows 實際 demo git client 與 git server, 該如何進行? \n \n \n \n 安裝 Git 客戶端 ： \n \n 首先，你需要在 Windows 上安裝 Git 客戶端。你可以從 Git 官方網站（ https://git-scm.com/）下載  Git for Windows，然後按照安裝指南進行安裝。 \n \n \n \n 設置 Git 客戶端 ： \n \n 安裝完成後，打開 Git Bash 或 Git 命令提示字元，設置使用者名稱和電子郵件地址\n \n \n \n \n \n \n \n 設置 Git 伺服器 ： \n \n 如果你想在本地搭建一個 Git 伺服器，你可以使用 Git 自帶的  git daemon  工具。在選擇一個目錄作為你的 Git 儲存庫後，運行以下命令啟動 Git 伺服器 \n \n \n \n 創建本地儲存庫 ： \n \n 使用 Git 客戶端，在你的本地系統中創建一個新的 Git 儲存庫。你可以使用命令列界面或圖形用戶界面進行操作。例如，在命令提示字元中，切換到你想要創建儲存庫的目錄，然後執行\n \n \n \n \n \n \n \n 連接到 Git 伺服器 ： \n \n 在本地儲存庫中，添加遠端伺服器的連結。假設你正在使用本地主機上運行的 Git 伺服器，則連結可以是類似  git://localhost/yourrepo.git  的格式。\n \n \n \n \n \n \n \n 推送和拉取變更 ： \n \n 現在你已經設置了本地儲存庫和遠端伺服器的連結，你可以使用 Git 客戶端來推送你的變更到伺服器，或者從伺服器拉取別人的變更。 \n \n \n \n 通過這些步驟，你可以在 Windows 上演示如何設置 Git 客戶端和伺服器，以及如何在它們之間進行通信。 \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n ChatGP \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'W6.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};